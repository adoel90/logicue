{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Boolean","window","location","hostname","match","require","themeOfLogicue","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","error","warning","success","common","white","black","transparent","grey","surface","background","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uNAYeA,EAVH,WAGV,OACE,oCACE,wCCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCHNC,EAAQ,IASR,IAAMC,EAAiBC,YAAe,CAGpCC,QAAS,CACPC,QAAS,CACPC,MAAM,UACNC,KAAM,UACNC,KAAK,UACLC,aAAa,WAGfC,UAAW,CACTJ,MAAM,UACNC,KAAM,UACNC,KAAK,UACLC,aAAc,WAGhBE,MAAO,CACLL,MAAO,UACPC,KAAK,UACLC,KAAK,UACLC,aAAc,SAEhBG,QAAS,CACPN,MAAM,UACNC,KAAM,UACNC,KAAM,UACNC,aAAc,SAGhBI,QAAS,CACPP,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,SAEhBK,OAAQ,CACNC,MAAQ,UACRC,MAAO,QACPC,YAAa,cACbC,KAAM,SAIVC,QAAQ,CAENZ,KAAM,WAERa,WAAY,CAEVb,KAAK,aAKTc,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAeC,MAAOvB,GACpB,kBAAC,EAAD,QAGJwB,SAASC,eAAe,SD4CpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMyB,c","file":"static/js/main.bae2f50d.chunk.js","sourcesContent":["import React from 'react';\n\nconst App = () => {\n\n\n  return (\n    <>           \n      <h1>Hai :)</h1>\n    </>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\n\n/*\n  ``````````````````\n  Font-family Global\n\n  ``````````````````\n*/\nrequire('typeface-open-sans')\n\n/*\n  ```````````````````````````````````````````````````````````````````\n  Theme of Material Design Color System for Logicue - Think forward\n\n  ```````````````````````````````````````````````````````````````````\n*/\n\nconst themeOfLogicue = createMuiTheme({\n  \n\n  palette: {\n    primary: {      \n      light:'#6d6d6d',\n      main: '#424242',\n      dark:'#1b1b1b',\n      contrastText:'#6d6d6d'\n\n    },\n    secondary: {\n      light:'#ffff56',\n      main: '#ffea00',\n      dark:'#c7b800',\n      contrastText: '#ffff56',\n      \n    },\n    error: {\n      light: '#bf334c',\n      main:'#B00020',\n      dark:'#7b0016',\n      contrastText: 'white'\n    },\n    warning: {\n      light:'#ffee33',\n      main: '#ffea00',\n      dark: '#b2a300',\n      contrastText: 'white'\n\n    },\n    success: {\n      light: '#91ff35',\n      main: '#76ff03',\n      dark: '#52b202',\n      contrastText: 'white'\n    },\n    common: {\n      white : '#ffffff',\n      black: 'black',\n      transparent: 'transparent',\n      grey: 'grey'\n    }\n  },\n\n  surface:{\n\n    main: '#FFFFFF'  \n  },\n  background: {\n\n    main:'#FFFFFF'\n  },\n\n});\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <ThemeProvider theme={themeOfLogicue}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}